#!/usr/bin/env bash

set -e

PACKAGES='git curl build-essential vim zsh tmux snapd libssl-dev libpam-gnome-keyring xclip exa'
SNAPPACKAGES='insomnia' #'discord insomnia gimp obs-studio'
NODEPACKAGES='tldr'
PROGRAMS='asdf docker'

ASDF_DIR='/srv/asdf'
ASDF_SCRIPT="$ASDF_DIR/asdf.sh"

cli_help() {
  echo "
Command: system [appearance | programs | all]
Usage:
  appearance -> setup icons and theme
  list       -> list programs to be installed by the 'programs' command
  programs   -> donwload and setup programs
  all        -> run all commands above"
  exit 1
}

icon_theme_setup() {
  if [[ -z $(ls /usr/share/icons | grep "candy-icons") ]]; then
  wget 'https://github.com/EliverLara/candy-icons/archive/refs/heads/master.zip' -O /tmp/candy-icons.zip
    sudo unzip /tmp/candy-icons.zip -d /usr/share/icons/
  fi
  gsettings set org.gnome.desktop.interface icon-theme candy-icons-master
}

system_theme_setup() {
  if [[ -z $(ls /usr/share/themes | grep -i "sweet") ]]; then
  wget 'https://github.com/EliverLara/Sweet/releases/download/v3.0/Sweet-Dark-v40.zip' -O /tmp/sweet-theme.zip
    sudo unzip /tmp/sweet-theme.zip -d /usr/share/themes/
  fi
	gsettings set org.gnome.desktop.interface gtk-theme 'Sweet-Dark-v40'
	gsettings set org.gnome.desktop.wm.preferences theme 'Sweet-Dark-v40'
}

# Download Hack font
fonts_download() {
  if [[ -z $(ls /usr/share/fonts/ttf | grep -i "hack") ]]; then
    sudo mkdir -p /usr/share/fonts/ttf
  wget 'https://github.com/source-foundry/Hack/releases/download/v3.003/Hack-v3.003-ttf.zip' -O /tmp/hack-font.zip
    sudo unzip /tmp/hack-font.zip -d /tmp/hack-font/
    sudo cp -t /usr/share/fonts/ttf/ /tmp/hack-font/ttf/*
  fi
}

fonts_setup() {
  fonts_download
	gsettings set org.gnome.desktop.interface font-name 'Hack Regular 12'
}

dock_setup() {
	gsettings set org.gnome.shell.extensions.dash-to-dock dock-fixed 'false'
	gsettings set org.gnome.shell.extensions.dash-to-dock autohide 'true'
	gsettings set org.gnome.shell.extensions.dash-to-dock intellihide 'true'
	gsettings set org.gnome.shell.extensions.dash-to-dock extend-height 'false'
}

setup_apprearance() {
  icon_theme_setup
  system_theme_setup
  fonts_setup
  dock_setup
}

asdf_install() {
  echo "Installing asdf"
  ASDF_GITHUB_REPO='https://github.com/asdf-vm/asdf.git'
  ASDF_LATEST_VERSION=$(git -c 'cersionsort.suffix=-' ls-remote --tags --refs --sort="v:refname" $ASDF_GITHUB_REPO | sed -E 's/^[[:xdigit:]]+[[:space:]]+refs\/tags\/(.+)/\1/g' | tail -n 1)
  sudo mkdir -p $ASDF_DIR
  sudo chown $USER:$USER $ASDF_DIR
	git clone $ASDF_GITHUB_REPO $ASDF_DIR --branch $ASDF_LATEST_VERSION
  echo "asdf installed"
}

asdf_install_python() {
  source $ASDF_SCRIPT
  sudo apt install -y libffi-dev libncurses5-dev zlib1g zlib1g-dev libssl-dev libreadline-dev libbz2-dev libsqlite3-dev liblzma-dev
  #sudo apt install -y libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev

  asdf plugin-add python || true
  PYTHON_VERSION=$(asdf list all python | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+" | grep -v "[a-zA-Z]" | tail -n 1)
  asdf install python $PYTHON_VERSION
  asdf global python $PYTHON_VERSION
}

asdf_install_node() {
	asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git || true
	NODE_VERSION=$(asdf list all nodejs | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+" | grep -v "[a-zA-Z]" | tail -n 1)
	asdf install nodejs $NODE_VERSION
	asdf global nodejs $NODE_VERSION

  setup_node_packages
}

setup_node_packages() {
  npm install -g $NODEPACKAGES
}

asdf_install_golang() {
  asdf plugin-add golang https://github.com/kennyp/asdf-golang.git || true
	GOLANG_VERSION=$(asdf list all golang | grep "^[0-9]\+\.[0-9]\+\.[0-9]\+" | grep -v "[a-zA-Z]" | tail -n 1)
	asdf install golang $GOLANG_VERSION
	asdf global golang $GOLANG_VERSION

  go install golang.org/x/tools/gopls@latest
}

asdf_setup() {
  asdf_install
  asdf_install_python
  asdf_install_node
  asdf_install_golang
}

docker_install() {
	echo "Installing docker"
	sudo apt install -y ca-certificates curl gnupg lsb-release
	curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor --batch --yes -o /usr/share/keyrings/docker-archive-keyring.gpg
	echo \
	  "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
	  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
	sudo apt update
	sudo apt install -y docker-ce docker-ce-cli containerd.io
	sudo groupadd -f docker
	sudo usermod -aG docker $USER
  echo "Docker installed"

}

tmux_setup() {
  ln -s -T /srv/dotfiles/tmux/tmux.conf ~/.tmux.conf
}

setup_programs() {
  sudo apt install -y $PACKAGES
  sudo snap install $SNAPPACKAGES

  asdf_setup
  docker_install

  tmux_setup
  #neovim_install
}

list_programs() {
  echo "APT packages to be installed:"
  echo $PACKAGES
  echo
  echo "Snap packages to be installed:"
  echo $SNAPPACKAGES
  echo
  echo "Other programs:"
  echo $PROGRAMS
}

[ ! -n "$1" ] && cli_help

case "$1" in
  appearance)
    setup_apprearance
    ;;
  programs)
    setup_programs
    ;;
  list)
    list_programs
    ;;
  all)
    setup_apprearance
    setup_programs
    ;;
  *)
    cli_help
    ;;
esac
